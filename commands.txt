Strimzi Kafka Operator
Quick Start: https://strimzi.io/quickstarts/

kubectl create namespace kafka
kubectl apply -f 'https://strimzi.io/install/latest?namespace=kafka' -n kafka


kubectl apply -f https://strimzi.io/examples/latest/kafka/kafka-persistent-single.yaml -n kafka 
kubectl wait kafka/my-cluster --for=condition=Ready --timeout=300s -n kafka 


Producer:
kubectl -n kafka run kafka-producer -ti --image=strimzi/kafka:0.19.0-kafka-2.5.0 --rm=true --restart=Never -- bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic my-topic

Consumer:
kubectl -n kafka run kafka-consumer -ti --image=strimzi/kafka:0.19.0-kafka-2.5.0 --rm=true --restart=Never -- bin/kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap:9092 --topic my-topic --from-beginning


ksqlDB cli:
kubectl run ksql-cli -it --image confluentinc/ksqldb-cli:0.11.0 ksql http://ksqldb-cluster.ksqldb:8088
kubectl delete deployment ksql-cli

Run the following to tell ksqlDB to read from the beginning of each stream:
SET 'auto.offset.reset' = 'earliest';

kubectl -n kafka delete pod kafka-producer 
kubectl -n kafka run kafka-producer -ti --image=strimzi/kafka:0.19.0-kafka-2.5.0 --rm=true --restart=Never -- bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic movie-topic --property "parse.key=true" --property "key.separator=:"
1:{"id": 1, "name": "Movie1"}
2:{"id": 2, "name": "Movie2"}
3:{"id": 3, "name": "Movie3"}

kubectl -n kafka run kafka-producer -ti --image=strimzi/kafka:0.19.0-kafka-2.5.0 --rm=true --restart=Never -- bin/kafka-console-producer.sh --broker-list my-cluster-kafka-bootstrap:9092 --topic movie-topic
{"id": 1, "name": "Movie1"}
{"id": 2, "name": "Movie2"}
{"id": 3, "name": "Movie3"}

To scale ksqlDB horizontally, run additional ksqlDB servers with the same ksql.service.id and ksql.streams.bootstrap.servers settings.

DROP STREAM IF EXISTS MOVIE_STREAM DELETE TOPIC;
DROP TABLE IF EXISTS MOVIE_TABLE DELETE TOPIC;